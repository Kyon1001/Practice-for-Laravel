name: CI/CD Pipeline

on:
  push:
    branches: [ main, design ]
  pull_request:
    branches: [ main, design ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: laravel_ec_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/package-lock.json

    - name: Copy .env
      run: |
        cd src
        php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install PHP Dependencies
      run: |
        cd src
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Install Node Dependencies
      run: |
        cd src
        npm ci

    - name: Generate Application Key
      run: |
        cd src
        php artisan key:generate

    - name: Directory Permissions
      run: |
        cd src
        chmod -R 755 storage bootstrap/cache

    - name: Create Database
      run: |
        cd src
        php artisan migrate --env=testing --force

    - name: Seed Database
      run: |
        cd src
        php artisan db:seed --env=testing --force

    - name: Build Assets
      run: |
        cd src
        npm run build

    - name: Execute Tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_ec_test
        DB_USERNAME: root
        DB_PASSWORD: ''
      run: |
        cd src
        php artisan test --coverage

    - name: Code Quality Check
      run: |
        cd src
        # PHP CS Fixer (コードスタイルチェック)
        composer require --dev friendsofphp/php-cs-fixer
        ./vendor/bin/php-cs-fixer fix --dry-run --diff

    - name: Security Check
      run: |
        cd src
        # セキュリティ脆弱性チェック
        composer audit

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/design'

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/package-lock.json

    - name: Install Dependencies
      run: |
        cd src
        composer install --optimize-autoloader --no-dev
        npm ci

    - name: Build Production Assets
      run: |
        cd src
        npm run build

    - name: Create deployment artifact
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: |
        tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules --exclude=tests .

    - name: Store artifact for distribution
      uses: actions/upload-artifact@v4
      with:
        name: app-build
        path: ${{ github.sha }}.tar.gz

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/design'
    environment: staging

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: app-build

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Note: ここに実際のデプロイスクリプトを記述
        # 例: rsync, scp, またはクラウドプロバイダーのCLIツールを使用

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: app-build

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Note: ここに実際のデプロイスクリプトを記述
        # 例: rsync, scp, またはクラウドプロバイダーのCLIツールを使用 